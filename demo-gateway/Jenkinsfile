pipeline {
    agent any
    environment {
        VERSION_ID = "1.0.0"
    }

    stages {
        stage('拉取代码') {
            steps {
                git credentialsId: 'eadd004e-5cff-4ccd-8745-20a3d263fb5f', url: 'https://gitee.com/wudikaka/demo.git'
                echo '拉取成功'
            }
        }
        stage('执行构建') {
            steps {
                // 如果maven可以运行，那么执行以下代码，这里需要注意一下，pom.xml文件是否在你创建的任务目录下
                sh "mvn clean package -U -pl demo-gateway -am -Dmaven.test.skip=true"
                echo '构建完成'
            }
        }
//        stage('Remote Commands') {
//            steps {
//                script {
//                    // 定义SSH连接的相关参数
//                    def remoteServer = '120.77.58.15'
//                    def remoteUser = 'konyliu'
//                    // 使用SSH Agent插件执行SSH操作
//                    sshagent(['konyliu-aliyun15']) {
//                        // 执行多个命令在同一个SSH会话中
//                        sh """
//                            ssh ${remoteUser}@${remoteServer} '
//                            sh /home/konyliu/application/demo-eureka/demo-eureka.sh restart
//                            '
//                        """
//                    }
//                }
//            }
//        }
        stage('把jar包构建为docker镜像并运行') {
            steps {
                script {
                    // 定义SSH连接的相关参数
                    def jenkinsPath='/var/lib/jenkins/workspace'
                    def dockPath="/home/konyliu/docker/demo-gateway"
                    def appName='gateway8091'
                    def artifactId='demo-gateway'
                    def remoteServer = '120.77.58.15'
                    def remoteUser = 'konyliu'
                    def VERSION_ID="1.0.0"

                    // 使用SSH Agent插件执行SSH操作
                    sshagent(['konyliu-aliyun15']) {
                        // 执行多个命令在同一个SSH会话中
                        sh """
                    ssh ${remoteUser}@${remoteServer} '
                    mkdir -p ${dockPath}
                    cp ${jenkinsPath}/${artifactId}/${artifactId}/target/${appName}*.jar ${dockPath}
                    cp ${jenkinsPath}/${artifactId}/${artifactId}/Dockerfile ${dockPath}
                    echo "VERSION_ID: ${VERSION_ID}"
                    old_image_id=\$(docker images | grep ${artifactId} | grep ${VERSION_ID} | awk "{print \\\$3}")
                    echo "old_image_id: \${old_image_id}"
                    if [[ -n "\${old_image_id}" ]]; then
                        docker rmi -f \${old_image_id}
                    fi

                    docker build -f ${dockPath}/Dockerfile -t ${artifactId}:${VERSION_ID} ${dockPath}

                    container_id=\$(docker ps -aq --filter "name=${artifactId}" --filter "status=running")
                    if [[ -n "\${container_id}" ]]; then
                        docker stop \${container_id}
                        docker rm \${container_id}
                    fi

                    old_pid=\$(ps -ef | grep ${appName}.jar | grep -v grep | awk "{print \\\$2}")
                    if [[ -n "\${old_pid}" ]]; then
                        kill -9 \${old_pid}
                    fi

                    docker run --name ${artifactId} -e "PROFILE=-Dspring.profiles.active=prod" -e "JAVA_OPTS=-Xms128m -Xmx256m" -v ${dockPath}/log:/log -v /etc/localtime:/etc/localtime -p 8090:8090 -d ${artifactId}:${VERSION_ID}
                '
                """
                        echo '运行成功'
                    }
                }
            }
        }


    }
}
